# Generated by Django 5.0.1 on 2025-01-30 12:49

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GeofencingZone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "zone_type",
                    models.CharField(
                        choices=[
                            ("EN", "Entry"),
                            ("EX", "Exit"),
                            ("DW", "Dwell"),
                            ("PA", "Parking"),
                            ("SE", "Service"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "polygon",
                    django.contrib.gis.db.models.fields.PolygonField(
                        help_text="Zone boundaries", srid=4326
                    ),
                ),
                (
                    "radius",
                    models.FloatField(default=0, help_text="Buffer radius in meters"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("notification_enabled", models.BooleanField(default=True)),
                (
                    "dwell_time",
                    models.IntegerField(
                        default=0,
                        help_text="Minimum time in seconds to trigger dwell event",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geofencing_zones",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "geofencing zone",
                "verbose_name_plural": "geofencing zones",
            },
        ),
        migrations.CreateModel(
            name="LocationBasedService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("QU", "Queue"),
                            ("PA", "Parking"),
                            ("IN", "Information"),
                            ("AS", "Assistance"),
                        ],
                        max_length=2,
                    ),
                ),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                (
                    "radius",
                    models.FloatField(help_text="Service coverage radius in meters"),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "operating_hours",
                    models.JSONField(
                        default=dict, help_text="Operating hours by day of week"
                    ),
                ),
                (
                    "capacity",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum number of users that can be served",
                        null=True,
                    ),
                ),
                (
                    "current_load",
                    models.IntegerField(
                        default=0, help_text="Current number of users being served"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="location_services",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "location-based service",
                "verbose_name_plural": "location-based services",
            },
        ),
        migrations.CreateModel(
            name="ProximityAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("QU", "Queue Alert"),
                            ("PA", "Parking Alert"),
                            ("SE", "Service Alert"),
                            ("CU", "Custom Alert"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "target_location",
                    django.contrib.gis.db.models.fields.PointField(srid=4326),
                ),
                ("radius", models.FloatField(help_text="Alert radius in meters")),
                ("message", models.TextField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "one_time",
                    models.BooleanField(
                        default=True,
                        help_text="If True, alert will be deactivated after first trigger",
                    ),
                ),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("triggered_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proximity_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "proximity alert",
                "verbose_name_plural": "proximity alerts",
            },
        ),
        migrations.CreateModel(
            name="GeofencingEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[("EN", "Enter"), ("EX", "Exit"), ("DW", "Dwell")],
                        max_length=2,
                    ),
                ),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "dwell_time",
                    models.IntegerField(
                        blank=True, help_text="Time spent in zone in seconds", null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geofencing_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="geolocation.geofencingzone",
                    ),
                ),
            ],
            options={
                "verbose_name": "geofencing event",
                "verbose_name_plural": "geofencing events",
                "indexes": [
                    models.Index(
                        fields=["user", "zone", "timestamp"],
                        name="geolocation_user_id_5d9871_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="UserLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        help_text="Location coordinates (longitude, latitude)",
                        srid=4326,
                    ),
                ),
                (
                    "accuracy",
                    models.FloatField(
                        blank=True,
                        help_text="Accuracy of the location in meters",
                        null=True,
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        blank=True, help_text="Altitude in meters", null=True
                    ),
                ),
                (
                    "speed",
                    models.FloatField(
                        blank=True, help_text="Speed in meters per second", null=True
                    ),
                ),
                (
                    "heading",
                    models.FloatField(
                        blank=True, help_text="Heading in degrees", null=True
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_moving", models.BooleanField(default=False)),
                (
                    "battery_level",
                    models.FloatField(
                        blank=True, help_text="Device battery level (0-1)", null=True
                    ),
                ),
                (
                    "connection_type",
                    models.CharField(
                        choices=[
                            ("wifi", "WiFi"),
                            ("cellular", "Cellular"),
                            ("none", "No Connection"),
                        ],
                        default="none",
                        max_length=10,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user location",
                "verbose_name_plural": "user locations",
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="geolocation_user_id_a30654_idx",
                    )
                ],
            },
        ),
    ]
